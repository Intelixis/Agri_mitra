import os
from dotenv import load_dotenv
import streamlit as st
import google.generativeai as genai
from streamlit_mic_recorder import mic_recorder, speech_to_text
import config as config
from component import session_state
from component import utils


session_state.session_management()

genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Set page configuration as the first Streamlit command
utils.page_config()


lang_data = {
    "English": {
        "app_title": "AgriMitra",
        "subtitle": "Krishi Mitra is a multimodal agribot that supports both text and voice interactions",
        "ask_question": "Kindly ask your agricultural question:",
        "submit_button": "Ask",
        "clear_button": "Clear",
        "chat_tab": "üå± Chat",
        "speech_tab": "üé§ Speech to Text",
        "chat_with_agrimitra": "Chat with AgriMitra",
        "response": "Response",
        "history": "Chat History",
        "convert_speech": "Convert Speech to Text",
        "received_texts": "Received Texts",
        "generating_content": "Generating content...",
        "bot_response": "Expert's Response",
        "footer": "Powered by Streamlit & Google Generative AI",
        "getting_response": "Getting response...",
        "options": "Options",
        "chat_instructions": "Please enter your question about agriculture or farming.",
        "example_questions_label": "Example Questions:",
        "sample_questions_label": "Sample Questions:",
        "select_question_label": "Select a question",
        "example_questions": [
            "What are some effective pest control methods for tomato plants?",
            "How can I improve soil fertility for better crop yield?",
            "What is the ideal temperature range for growing strawberries?",
            "Can you suggest organic fertilizers for promoting plant growth?"
        ]
    },
    "Hindi": {
        "app_title": "‡§è‡§ó‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§§‡•ç‡§∞‡§æ",
        "subtitle": "‡§ï‡•É‡§∑‡§ø ‡§Æ‡§ø‡§§‡•ç‡§∞ ‡§è‡§ï ‡§Æ‡§≤‡•ç‡§ü‡•Ä‡§Æ‡•â‡§°‡§≤ ‡§è‡§ó‡•ç‡§∞‡•Ä‡§¨‡•â‡§ü ‡§π‡•à ‡§ú‡•ã ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§î‡§∞ ‡§µ‡•â‡§Ø‡§∏ ‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§∂‡§® ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§ï‡§æ¬†‡§∏‡§Æ‡§∞‡•ç‡§•‡§®¬†‡§ï‡§∞‡§§‡§æ¬†‡§π‡•à‡•§",
        "ask_question": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§ï‡•É‡§∑‡§ø ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•Ä ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç:",
        "submit_button": "‡§™‡•Ç‡§õ‡•á‡§Ç",
        "clear_button": "‡§∏‡§æ‡§´ ‡§ï‡§∞‡•á‡§Ç",
        "chat_tab": "üå± ‡§ö‡•à‡§ü",
        "speech_tab": "üé§ ‡§µ‡§æ‡§ï‡•ç-‡§∏‡•á-‡§™‡§æ‡§†",
        "chat_with_agrimitra": "‡§è‡§ó‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§§‡•ç‡§∞‡§æ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ö‡•à‡§ü ‡§ï‡§∞‡•á‡§Ç",
        "response": "‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ",
        "history": "‡§ö‡•à‡§ü ‡§á‡§§‡§ø‡§π‡§æ‡§∏",
        "convert_speech": "‡§µ‡§æ‡§ï‡•ç ‡§ï‡•ã ‡§™‡§æ‡§† ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡•á‡§Ç",
        "received_texts": "‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§™‡§æ‡§†",
        "generating_content": "‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡•Ä ‡§ú‡§æ ‡§∞‡§π‡•Ä ‡§π‡•à...",
        "bot_response": "‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ",
        "footer": "Streamlit & Google Generative AI ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§",
        "getting_response": "‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡•Ä ‡§ú‡§æ ‡§∞‡§π‡•Ä ‡§π‡•à...",
        "options": "‡§µ‡§ø‡§ï‡§≤‡•ç‡§™",
        "chat_instructions": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§ï‡•É‡§∑‡§ø ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•Ä ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§",
        "example_questions_label": "‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®:",
        "sample_questions_label": "‡§®‡§Æ‡•Ç‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®:",
        "select_question_label": "‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ö‡•Å‡§®‡•á‡§Ç",
        "example_questions": [
            "‡§ü‡§Æ‡§æ‡§ü‡§∞ ‡§™‡•å‡§ß‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•Å‡§∂‡§≤ ‡§ï‡•Ä‡§ü ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§µ‡§ø‡§ß‡§ø‡§Ø‡§æ‡§Ç ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç?",
            "‡§¨‡•á‡§π‡§§‡§∞ ‡§´‡§∏‡§≤ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•É‡§¶‡§æ ‡§™‡•å‡§∑‡•ç‡§ü‡§ø‡§ï‡§§‡§æ ‡§ï‡•ã ‡§ï‡•à‡§∏‡•á ‡§∏‡•Å‡§ß‡§æ‡§∞‡•á‡§Ç?",
            "‡§∏‡•ç‡§ü‡•ç‡§∞‡•â‡§¨‡•á‡§∞‡•Ä ‡§â‡§ó‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§¶‡§∞‡•ç‡§∂ ‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§∏‡•Ä‡§Æ‡§æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
            "‡§™‡•å‡§ß‡•ã‡§Ç ‡§ï‡•á ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§ï‡•ã ‡§¨‡§¢‡§º‡§æ‡§µ‡§æ ‡§¶‡•á‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡•à‡§µ‡§ø‡§ï ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§ï‡§æ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§¶‡•á‡§Ç‡•§"
        ]
    }
}



language = utils.language_selection()

# Mapping language selection to content dictionary keys
lang = "English" if st.session_state.language == "English" else "Hindi"
# Load environment variables
load_dotenv()

utils.page_design()

# Title of the application
st.markdown(f"<h1 class='header-title'>{lang_data[lang]['app_title']}</h1>", unsafe_allow_html=True)
# Subtitle
st.markdown(f"<h3 class='subtitle'>{lang_data[lang]['subtitle']}</h3>", unsafe_allow_html=True)
# Configure Google Generative AI with API key
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

model = genai.GenerativeModel("gemini-pro")
chat = model.start_chat(history=[])

def get_gemini_response(question, language):
    with st.spinner(lang_data[language]["getting_response"]):
        response = chat.send_message(question, stream=True)
    return response



# Add header image and title
header_col1, header_col2, header_col3 = st.columns([1, 2, 1])
# with header_col2:
#     st.markdown(f"<h1 class='header'>{lang_data[st.session_state.language]['app_title']}</h1>", unsafe_allow_html=True)

# Main content area with tabs
tab1, tab2 = st.tabs([lang_data[language]["chat_tab"], lang_data[language]["speech_tab"]])

with tab1:
    st.markdown(f"### {lang_data[language]['chat_with_agrimitra']}")
    st.markdown(f"{lang_data[language]['chat_instructions']}")
    
    text_input_label = lang_data[language]["select_question_label"]
    selected_question = st.selectbox(text_input_label, [""] + lang_data[language]["example_questions"], key="example_question")
    
    if selected_question:
        user_input = st.text_input(
            lang_data[language]["ask_question"], value=selected_question, key=f"user_input_{st.session_state.input_key}"
        )
    else:
        user_input = st.text_input(
            lang_data[language]["ask_question"], key=f"user_input_{st.session_state.input_key}"
        )
    
    st.markdown(f"#### {lang_data[language]['example_questions_label']}")
    for q in lang_data[language]["example_questions"]:
        st.markdown(f"- {q}")

    col1, col2, col3, col4, col5 = st.columns([1, 1, 1, 1, 1])
    with col2:
        submit = st.button(lang_data[language]["submit_button"], use_container_width=True)
    with col4:
        clear = st.button(lang_data[language]["clear_button"], use_container_width=True)

    if submit and user_input:
        st.session_state.history.append(("User", user_input))
        with st.spinner(lang_data[language]["getting_response"]):
            response = get_gemini_response(user_input, st.session_state.language)
        st.subheader(lang_data[language]["response"])
        with st.expander(lang_data[language]["bot_response"]):
            full_response = "".join([chunk.text for chunk in response])
            st.markdown(f"<div class='chat-bubble'>{full_response}</div>", unsafe_allow_html=True)
            st.session_state.history.append(("Bot", full_response))

    st.markdown(f"### {lang_data[language]['history']}")
    for sender, message in st.session_state.history:
        if sender == "Bot":
            st.markdown(f"<div class='chat-bubble'>{message}</div>", unsafe_allow_html=True)
        else:
            st.markdown(f"<div class='chat-bubble user-bubble'>{message}</div>", unsafe_allow_html=True)

with tab2:
    st.markdown(f"### {lang_data[language]['convert_speech']}")
    
    text = speech_to_text(
        language="Hindi" if language == "Hindi" else "en", use_container_width=True, just_once=True, key="STT"
    )
    if text:
        st.session_state.text_received.append(text)
    ask_speech = st.button(lang_data[language]["submit_button"], key="ask_speech")
    if ask_speech and st.session_state.text_received:
        question = st.session_state.text_received[-1]
        st.session_state.history.append(("User", question))
        with st.spinner(lang_data[language]["getting_response"]):
            response = get_gemini_response(question, st.session_state.language)
        st.markdown(f"#### {lang_data[language]['response']}")
        with st.expander(lang_data[language]["bot_response"]):
            full_response = "".join([chunk.text for chunk in response])
            st.markdown(f"<div class='chat-bubble'>{full_response}</div>", unsafe_allow_html=True)
            st.session_state.history.append(("Bot", full_response))
    
    st.markdown(f"#### {lang_data[language]['example_questions_label']}")
    for q in lang_data[language]["example_questions"]:
        st.markdown(f"- {q}")

    st.markdown(f"### {lang_data[language]['received_texts']}")
    for i, t in enumerate(st.session_state.text_received):
        st.write(f"{i + 1}: {t}")
